[{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://andjar.github.io/Rydra/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://andjar.github.io/Rydra/articles/clinical-trial-patient-selection.html","id":"the-patient-selection-model","dir":"Articles","previous_headings":"","what":"1. The Patient Selection Model","title":"Vignette 3: Clinical Trial Patient Selection","text":"model calculates score patient based demographics, lab results, medical history. score used determine patient good candidate clinical trial. model defined clinical_trial_selection.yaml file:","code":"model_name: \"clinical_trial_selection\"  constants:   creatinine: 1.0  main_model:   intercepts:     baseline: 0    coefficients:     age_above_60: 0.1     creatinine_high: 0.2     comorbidity_score_high: 0.3     previous_treatment_failed: 0.4    transformations:     - name: \"age_category\"       formula: \"ifelse(age > 60, 1, 0)\"     - name: \"creatinine_category\"       formula: \"ifelse(creatinine > 1.5, 1, 0)\"    factors:     - name: \"comorbidity_score\"       levels:         - value: \"low\"           coefficient: \"intercepts.baseline\"         - value: \"medium\"           coefficient: \"intercepts.baseline\"         - value: \"high\"           coefficient: \"coefficients.comorbidity_score_high\"     - name: \"previous_treatment\"       levels:         - value: \"naive\"           coefficient: \"intercepts.baseline\"         - value: \"failed\"           coefficient: \"coefficients.previous_treatment_failed\"         - value: \"success\"           coefficient: \"intercepts.baseline\"    conditions:     - name: \"age_above_60_cond\"       condition: \"age_category == 1\"       coefficient: \"coefficients.age_above_60\"     - name: \"creatinine_high_cond\"       condition: \"creatinine_category == 1\"       coefficient: \"coefficients.creatinine_high\"    output_transformation: \"truncate_variable(result, 0, 1.0)\""},{"path":"https://andjar.github.io/Rydra/articles/clinical-trial-patient-selection.html","id":"using-the-patient-selection-model","dir":"Articles","previous_headings":"","what":"2. Using the Patient Selection Model","title":"Vignette 3: Clinical Trial Patient Selection","text":"can use rydra_calculate function calculate score different patients.","code":"library(Rydra)  input_data <- list(   age = 55,   creatinine = 1.2,   comorbidity_score = \"medium\",   previous_treatment = \"naive\" )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"clinical_trial_selection.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 0 input_data <- list(   age = 61,   creatinine = 1.6,   comorbidity_score = \"high\",   previous_treatment = \"naive\" )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"clinical_trial_selection.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 0.6"},{"path":"https://andjar.github.io/Rydra/articles/clinical-trial-patient-selection.html","id":"scenario-1-ideal-candidate","dir":"Articles","previous_headings":"","what":"Scenario 1: Ideal Candidate","title":"Vignette 3: Clinical Trial Patient Selection","text":"","code":"library(Rydra)  input_data <- list(   age = 55,   creatinine = 1.2,   comorbidity_score = \"medium\",   previous_treatment = \"naive\" )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"clinical_trial_selection.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 0"},{"path":"https://andjar.github.io/Rydra/articles/clinical-trial-patient-selection.html","id":"scenario-2-high-risk-candidate","dir":"Articles","previous_headings":"","what":"Scenario 2: High-Risk Candidate","title":"Vignette 3: Clinical Trial Patient Selection","text":"","code":"input_data <- list(   age = 61,   creatinine = 1.6,   comorbidity_score = \"high\",   previous_treatment = \"naive\" )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"clinical_trial_selection.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 0.6"},{"path":"https://andjar.github.io/Rydra/articles/clinical-trial-patient-selection.html","id":"how-the-calculation-works","dir":"Articles","previous_headings":"","what":"How the calculation works","title":"Vignette 3: Clinical Trial Patient Selection","text":"Transformations age_category = ifelse(age > 60, 1, 0) creatinine_category = ifelse(creatinine > 1.5, 1, 0) Aggregate score (result output transformation) base_score = intercepts.baseline = 0 comorbidity_score: low/medium → intercepts.baseline (0); high → coefficients.comorbidity_score_high (0.3) previous_treatment: naive/success → intercepts.baseline (0); failed → coefficients.previous_treatment_failed (0.4) age_category == 1 add coefficients.age_above_60 (0.1) creatinine_category == 1 add coefficients.creatinine_high (0.2) total_score = base_score + factor_coeffs_sum + conditional_coeffs_sum Output transformation final_result = truncate_variable(result, 0, 1.0) Worked examples - Scenario 1 (age=55, creatinine=1.2, comorbidity_score=medium, previous_treatment=naive): - age_category = 0; creatinine_category = 0 - factor_coeffs_sum = 0 + 0 = 0; conditional_coeffs_sum = 0 + 0 = 0 - total_score = 0 → final_result = 0 - Scenario 2 (age=61, creatinine=1.6, comorbidity_score=high, previous_treatment=naive): - age_category = 1; creatinine_category = 1 - factor_coeffs_sum = 0.3 + 0 = 0.3; conditional_coeffs_sum = 0.1 + 0.2 = 0.3 - total_score = 0.6 → final_result = 0.6","code":""},{"path":"https://andjar.github.io/Rydra/articles/clinical-trial-patient-selection.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"3. Conclusion","title":"Vignette 3: Clinical Trial Patient Selection","text":"example demonstrates Rydra can used create highly complex realistic models. ability define transformations, factors, conditions structured YAML file makes possible build manage sophisticated calculation logic. versionable nature configuration file crucial clinical setting, traceability reproducibility paramount.","code":""},{"path":"https://andjar.github.io/Rydra/articles/insurance-risk-model.html","id":"the-insurance-risk-model","dir":"Articles","previous_headings":"","what":"1. The Insurance Risk Model","title":"Vignette 2: Insurance Risk Model","text":"model calculates risk score individual based age, BMI, smoking status. also includes high-risk adjustment older individuals high BMI. model defined insurance_risk_model.yaml file:","code":"model_name: \"insurance_risk\"  constants:   age: 40   bmi: 25  main_model:   intercepts:     baseline: 0.5    coefficients:     age_centered: 0.02     bmi_log: 0.1     smoker_modifier: 0.3     high_risk_adjustment: 0.2    transformations:     - name: \"age_centered\"       formula: \"center_variable(age, constants.age)\"     - name: \"bmi_log\"       formula: \"log_transform(bmi)\"    factors:     - name: \"smoker\"       levels:         - value: 0           coefficient: \"intercepts.baseline\"         - value: 1           coefficient: \"coefficients.smoker_modifier\"    conditions:     - name: \"high_risk_age_bmi\"       condition: \"age > 50 && bmi > 30\"       coefficient: \"coefficients.high_risk_adjustment\"    output_transformation: \"truncate_variable(result, 0, 1)\""},{"path":"https://andjar.github.io/Rydra/articles/insurance-risk-model.html","id":"using-the-insurance-risk-model","dir":"Articles","previous_headings":"","what":"2. Using the Insurance Risk Model","title":"Vignette 2: Insurance Risk Model","text":"can use rydra_calculate function calculate risk score different individuals.","code":"library(Rydra)  input_data <- list(   age = 20,   bmi = 18,   smoker = 0 )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"insurance_risk_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 0.8890372 input_data <- list(   age = 52,   bmi = 31,   smoker = 1 )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"insurance_risk_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 1"},{"path":"https://andjar.github.io/Rydra/articles/insurance-risk-model.html","id":"scenario-1-young-healthy-non-smoker","dir":"Articles","previous_headings":"","what":"Scenario 1: Young, healthy non-smoker","title":"Vignette 2: Insurance Risk Model","text":"","code":"library(Rydra)  input_data <- list(   age = 20,   bmi = 18,   smoker = 0 )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"insurance_risk_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 0.8890372"},{"path":"https://andjar.github.io/Rydra/articles/insurance-risk-model.html","id":"scenario-2-older-smoker-with-high-bmi","dir":"Articles","previous_headings":"","what":"Scenario 2: Older, smoker with high BMI","title":"Vignette 2: Insurance Risk Model","text":"","code":"input_data <- list(   age = 52,   bmi = 31,   smoker = 1 )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"insurance_risk_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 1"},{"path":"https://andjar.github.io/Rydra/articles/insurance-risk-model.html","id":"how-the-calculation-works","dir":"Articles","previous_headings":"","what":"How the calculation works","title":"Vignette 2: Insurance Risk Model","text":"Transformations age_centered = center_variable(age, centering.age) = age − 40 bmi_log = log_transform(bmi) = ln(bmi) Aggregate score (result output transformation) base_score = intercepts.baseline + 0.02 × age_centered + 0.1 × bmi_log 0 → intercepts.baseline (0.5) 1 → coefficients.smoker_modifier (0.3) conditional_coeffs_sum comes age > 50 && bmi > 30 → adds coefficients.high_risk_adjustment (0.2) true total_score = base_score + factor_coeffs_sum + conditional_coeffs_sum Output transformation final_result = truncate_variable(result, 0, 1) Worked examples - Scenario 1 (age=20, bmi=18, smoker=0): - age_centered = 20 − 40 = −20; bmi_log ≈ ln(18) ≈ 2.8904 - base_score = 0.5 + 0.02×(−20) + 0.1×2.8904 = 0.5 − 0.4 + 0.2890 ≈ 0.3890 - factor_coeffs_sum = 0.5; conditional_coeffs_sum = 0 (condition false) - total_score ≈ 0.3890 + 0.5 + 0 = 0.8890 → final_result ≈ 0.8890 (truncated) - Scenario 2 (age=52, bmi=31, smoker=1): - age_centered = 12; bmi_log ≈ ln(31) ≈ 3.4340 - base_score = 0.5 + 0.02×12 + 0.1×3.4340 = 0.5 + 0.24 + 0.3434 ≈ 1.0834 - factor_coeffs_sum = 0.3; conditional_coeffs_sum = 0.2 (condition true) - total_score ≈ 1.0834 + 0.3 + 0.2 = 1.5834 → final_result = 1.0 truncation","code":""},{"path":"https://andjar.github.io/Rydra/articles/insurance-risk-model.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"3. Conclusion","title":"Vignette 2: Insurance Risk Model","text":"example demonstrates Rydra can used create complex models conditional logic. use YAML makes model easy understand maintain, even complexity grows. output transformation ensures final risk score always within valid range.","code":""},{"path":"https://andjar.github.io/Rydra/articles/pricing-model.html","id":"the-pricing-model","dir":"Articles","previous_headings":"","what":"1. The Pricing Model","title":"Vignette 1: Simple Pricing Model","text":"pricing model calculates total price based number users whether discount applied. model defined pricing_model.yaml file:","code":"model_name: \"basic_pricing\"  constants:   base_price: 100  main_model:   intercepts:     baseline: 0    coefficients:     price_per_user: 5     discount_percentage: -0.1     total_price: 1    transformations:     - name: \"user_cost\"       formula: \"multiply_by(users, coefficients.price_per_user)\"     - name: \"total_price\"       formula: \"add_value(constants.base_price, user_cost)\"     - name: \"has_discount_bool\"       formula: \"ifelse(is.logical(has_discount), has_discount, tolower(as.character(has_discount)) %in% c('yes','y','true','1'))\"     - name: \"discount_factor\"       formula: \"add_value(1, ifelse(has_discount_bool, coefficients.discount_percentage, 0))\"    output_transformation: \"multiply_by(result, discount_factor)\""},{"path":"https://andjar.github.io/Rydra/articles/pricing-model.html","id":"using-the-pricing-model","dir":"Articles","previous_headings":"","what":"2. Using the Pricing Model","title":"Vignette 1: Simple Pricing Model","text":"can use rydra_calculate function calculate price different scenarios.","code":"library(Rydra)  input_data <- list(   users = 10,   has_discount = FALSE )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"pricing_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 150 input_data <- list(   users = 20,   has_discount = TRUE )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"pricing_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 180"},{"path":"https://andjar.github.io/Rydra/articles/pricing-model.html","id":"scenario-1-10-users-no-discount","dir":"Articles","previous_headings":"","what":"Scenario 1: 10 users, no discount","title":"Vignette 1: Simple Pricing Model","text":"","code":"library(Rydra)  input_data <- list(   users = 10,   has_discount = FALSE )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"pricing_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 150"},{"path":"https://andjar.github.io/Rydra/articles/pricing-model.html","id":"scenario-2-20-users-with-discount","dir":"Articles","previous_headings":"","what":"Scenario 2: 20 users, with discount","title":"Vignette 1: Simple Pricing Model","text":"","code":"input_data <- list(   users = 20,   has_discount = TRUE )  result <- rydra_calculate(   config_path = system.file(\"extdata\", \"pricing_model.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" )  print(result) [1] 180"},{"path":"https://andjar.github.io/Rydra/articles/pricing-model.html","id":"how-the-calculation-works","dir":"Articles","previous_headings":"","what":"How the calculation works","title":"Vignette 1: Simple Pricing Model","text":"model computes final price three stages: Transformations user_cost = multiply_by(users, coefficients.price_per_user) total_price = add_value(constants.base_price, user_cost) has_discount_bool = ifelse(.logical(has_discount), has_discount, tolower(.character(has_discount)) %% c(‘yes’,‘y’,‘true’,‘1’)) discount_factor = add_value(1, ifelse(has_discount_bool, coefficients.discount_percentage, 0)) Aggregate score (result output transformation) intercepts.baseline + sum(coefficients × transformed_variables_present) simple model include total_price aggregate via coefficients.total_price = 1, : result = 0 + 1 × total_price = total_price Output transformation final_result = multiply_by(result, discount_factor) Worked examples - 10 users, discount: user_cost = 10 × 5 = 50; total_price = 100 + 50 = 150; has_discount_bool = FALSE; discount_factor = 1 + 0 = 1; final = 150 × 1 = 150 - 20 users, discount: user_cost = 20 × 5 = 100; total_price = 100 + 100 = 200; has_discount_bool = TRUE; discount_factor = 1 - 0.1 = 0.9; final = 200 × 0.9 = 180","code":""},{"path":"https://andjar.github.io/Rydra/articles/pricing-model.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"3. Conclusion","title":"Vignette 1: Simple Pricing Model","text":"simple example demonstrates use Rydra create versionable transparent pricing model. model logic clearly defined YAML file, making easy understand, modify, audit.","code":""},{"path":"https://andjar.github.io/Rydra/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anders Hagen Jarmund. Author, maintainer.","code":""},{"path":"https://andjar.github.io/Rydra/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jarmund (2025). Rydra: Hydra-inspired configuration management tool R. R package version 0.1.0.0, https://andjar.github.io/Rydra/.","code":"@Manual{,   title = {Rydra: A Hydra-inspired configuration management tool for R},   author = {Anders Hagen Jarmund},   year = {2025},   note = {R package version 0.1.0.0},   url = {https://andjar.github.io/Rydra/}, }"},{"path":"https://andjar.github.io/Rydra/index.html","id":"rydra","dir":"","previous_headings":"","what":"A Hydra-inspired configuration management tool for R","title":"A Hydra-inspired configuration management tool for R","text":"Hydra-inspired configuration management tool R Rydra provides simple flexible way manage configurations complex calculations R. inspired popular Python library Hydra, allows define calculations YAML file, makes easy read, modify, share.","code":""},{"path":"https://andjar.github.io/Rydra/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"A Hydra-inspired configuration management tool for R","text":"get started Rydra, first need install package GitHub: package installed, can use rydra_calculate() function perform calculations. function takes following arguments: config_path: path YAML configuration file. data: list single-row data frame containing input data calculation. model_name: (Optional) name model configuration block YAML file use. omitted, must specify model_name YAML root; otherwise rydra_calculate() error. implicit fallback first model. default, Rydra provides set base transformation functions: center_variable, square_variable, log_transform, exp_transform, multiply_by, add_value, truncate_variable. provide list argument, replace default set. means want use base function alongside custom ones, must include list provide. Example: list(my_custom_func = function(x) x*2, log_transform = Rydra::log_transform) Provide transformations = list() use pre-defined R functions Rydra, relying functions globally available R session defined directly sufficiently complex YAML transformation formulas (though passing functions cleaner). example use rydra_calculate() function:","code":"# install.packages(\"devtools\") devtools::install_github(\"andjar/Rydra\") # Load the Rydra package library(Rydra)  # Create a sample input data input_data <- list(   age = 35,   income = 60000,   student = 1,   employment_status = \"Unemployed\" )  # Perform the calculation using default base transformations # The `transformations` argument is omitted, so Rydra uses its defaults. # The example_config.yaml uses center_variable, square_variable, and log_transform. result <- rydra_calculate(   config_path = system.file(\"extdata\", \"example_config.yaml\", package = \"Rydra\"),   data = input_data,   model_name = \"main_model\" # example_config.yaml uses 'main_model' )  # Print the result print(result)  # Example of providing custom transformations (this would replace defaults): my_special_log <- function(x) log(x, base = 100) custom_transform_list <- list(   log_transform = my_special_log, # Overrides default log_transform   center_variable = Rydra::center_variable # Still need center_variable for example_config   # square_variable would be missing here if example_config needed it and we didn't add it ) # result_custom <- rydra_calculate( #   config_path = system.file(\"extdata\", \"example_config.yaml\", package = \"Rydra\"), #   data = input_data, #   model_name = \"main_model\", #   transformations = custom_transform_list # ) # print(result_custom)  # Example of providing no Rydra transformations (use if functions in YAML are globally defined): # result_no_defaults <- rydra_calculate( #   config_path = system.file(\"extdata\", \"example_config.yaml\", package = \"Rydra\"), #   data = input_data, #   model_name = \"main_model\", #   transformations = list() # This would likely cause errors for example_config.yaml # ) # print(result_no_defaults)"},{"path":"https://andjar.github.io/Rydra/index.html","id":"yaml-configuration-file","dir":"","previous_headings":"","what":"YAML Configuration File","title":"A Hydra-inspired configuration management tool for R","text":"YAML configuration file heart Rydra package. allows define parameters, transformations, factors, coefficients specific model. configuration file following structure:","code":"model_name: \"simplified_model\"  # Required if you omit the model_name argument  constants:  # Optional. Include only if referenced by transformations   age: 30   income: 50000  main_model:   intercepts:     baseline: 1.25    coefficients:     # Continuous variable coefficients     age_centered: 0.05            # Coefficient keys must match variable names present AFTER transformations     age_squared_centered: -0.02   # e.g., names created in the 'transformations' block     income_log: 0.15      # Coefficients for categorical variables     student_modifier: -0.50     employment_unemployed: -0.25     employment_self_employed: 0.10    transformations:     - name: \"age_centered\"       formula: \"center_variable(age, constants.age)\"     - name: \"age_squared_centered\"       formula: \"square_variable(age_centered)\"     - name: \"income_log\"       formula: \"log_transform(income)\"    factors: # Optional     - name: \"student\"       levels:         - value: 0           coefficient: \"coefficients.baseline\" # Assuming 0 is the baseline, so no additional coefficient         - value: 1           coefficient: \"coefficients.student_modifier\"     - name: \"employment_status\"       levels:         - value: \"Employed\"           coefficient: \"coefficients.baseline\" # Baseline for employment status         - value: \"Unemployed\"           coefficient: \"coefficients.employment_unemployed\"         - value: \"Self-employed\"           coefficient: \"coefficients.employment_self_employed\"    output_transformation: \"truncate_variable(result, 0, 100)\""},{"path":"https://andjar.github.io/Rydra/index.html","id":"transformations","dir":"","previous_headings":"YAML Configuration File","what":"Transformations","title":"A Hydra-inspired configuration management tool for R","text":"Rydra provides set built-transformation functions can use YAML configuration file. functions : center_variable(x, center): Centers variable subtracting centering value. square_variable(x): Squares variable. log_transform(x, base = exp(1)): Log-transforms variable (natural log default). exp_transform(x, base = exp(1)): Exponentiates variable (e^x default). multiply_by(value, multiplier): Multiplies value multiplier (useful output transformations). add_value(value, term): Adds term value (useful output transformations). subtract_value(value, term): Subtracts term value. Thin wrapper - readability whitelisting. divide_by(value, divisor): Divides value divisor. Thin wrapper /; errors division zero. truncate_variable(x, min_val, max_val): Truncates value [min, max] range. can also use custom transformation functions. explained “Getting Started” section, can pass named list functions via transformations argument rydra_calculate. , remember list replaces default set base transformations, include base functions still need (e.g., list(my_func = ..., log_transform = Rydra::log_transform)).","code":""},{"path":"https://andjar.github.io/Rydra/index.html","id":"nested-transformations","dir":"","previous_headings":"YAML Configuration File > Transformations","what":"Nested Transformations","title":"A Hydra-inspired configuration management tool for R","text":"Rydra supports nested transformations, transformation can use result previous one. transformations executed order defined YAML file. example, following valid sequence transformations: example, age_squared_centered uses result age_centered. powerful feature, sake clarity maintainability, recommend avoiding deeply nested transformations. possible, breaking complex transformations smaller, independent steps can make configuration easier read debug.","code":"transformations:   - name: \"age_centered\"     formula: \"center_variable(age, constants.age)\"   - name: \"age_squared_centered\"     formula: \"square_variable(age_centered)\""},{"path":"https://andjar.github.io/Rydra/index.html","id":"factors","dir":"","previous_headings":"YAML Configuration File","what":"Factors","title":"A Hydra-inspired configuration management tool for R","text":"factors section YAML configuration file allows define manage categorical variables. factor name list levels. level value (actual value factor data) coefficient (path coefficient coefficients intercepts section applied level present). explicitly define levels, including baseline, ensure proper validation clarity. section optional—include need factor-based adjustments.","code":""},{"path":"https://andjar.github.io/Rydra/index.html","id":"conditions","dir":"","previous_headings":"YAML Configuration File","what":"Conditions","title":"A Hydra-inspired configuration management tool for R","text":"conditions section allows apply additional coefficients based logical expressions evaluated input data (transformations). useful implementing interaction effects, applying specific adjustments, conditional logic easily covered direct factors transformations. item conditions list must : * name: descriptive name condition. * condition: R expression (string) evaluates TRUE FALSE. expression can reference variable input data (including created transformations) also elements model’s intercepts coefficients blocks (e.g., age > intercepts.age_threshold). * coefficient: path string (e.g., \"coefficients.high_risk_adj\" \"intercepts.special_bonus\") numeric value within current model’s configuration. condition evaluates TRUE, numeric value added total score. Example conditions block: condition’s expression TRUE, numeric value found specified coefficient path added score. FALSE, contributes nothing.","code":"# Inside your model_name block (e.g., main_model) # ...   intercepts:     baseline: 1.25     special_bonus: 0.75     age_threshold: 50   coefficients:     age_centered: 0.05     # ... other coefficients ...     high_risk_adj: 0.25    transformations:     - name: \"age_centered\"       formula: \"center_variable(age, centering.age)\"     # ... other transformations ...    factors:     # ... your factors ...    conditions:     - name: \"high_risk_adjustment\"       condition: \"age_centered > 10 && some_other_variable == 'CategoryA'\"       coefficient: \"coefficients.high_risk_adj\" # Adds 0.25 if condition is met     - name: \"senior_bonus_if_employed\"       condition: \"age > intercepts.age_threshold && employment_status == 'Employed'\"       coefficient: \"intercepts.special_bonus\"    # Adds 0.75 if condition is met # ..."},{"path":"https://andjar.github.io/Rydra/index.html","id":"output-transformation","dir":"","previous_headings":"YAML Configuration File","what":"Output Transformation","title":"A Hydra-inspired configuration management tool for R","text":"output_transformation section YAML configuration file allows apply final transformation calculated score. transformation must call function available transformations list provided (defaulted ) rydra_calculate function. transformation string format \"function_name(arguments)\". special variable result (holds total aggregated score final step) must used one arguments function. mechanism intended final scaling, unit conversions, applying caps/floors using predefined allowed transformation functions. Raw R code arbitrary expressions longer permitted ensure better control clarity. Available built-transformation functions (can used part active transformations list) suitable output transformations include: * multiply_by(value, multiplier): Multiplies value multiplier. * add_value(value, term): Adds term value. * Standard R functions like log(), exp(), pmin(), pmax() can also used part transformations list (note: base R functions included default transformations list; explicitly defined Rydra:::.default_rydra_transformations user-provided lists). use base R functions, typically wrap add list passed rydra_calculate. simplicity, log_transform exp_transform provided default. Examples YAML: truncate result minimum 0 maximum 100: scale result 100: add 5 result: subtract 5 result: divide result 100: log_transform function (available default) can also used: Important: * function used (e.g., multiply_by) must present named list functions provided via transformations argument rydra_calculate (part Rydra’s default set). * expression must single function call. * result variable must explicitly passed argument function.","code":"output_transformation: \"truncate_variable(result, 0, 100)\" output_transformation: \"multiply_by(result, 100)\" output_transformation: \"add_value(result, 5)\" output_transformation: \"subtract_value(result, 5)\" output_transformation: \"divide_by(result, 100)\" output_transformation: \"log_transform(result, base = 10)\""},{"path":"https://andjar.github.io/Rydra/index.html","id":"example-score-calculation-walkthrough","dir":"","previous_headings":"YAML Configuration File","what":"Example: Score Calculation Walkthrough","title":"A Hydra-inspired configuration management tool for R","text":"Let’s walk score calculated medium-complex example. ’ll use hypothetical model configuration similar main_model found inst/extdata/example_config.yaml. Sample Input Data: age: 40 income: 70000 student: 1 (true/active student) employment_status: “Unemployed” Relevant YAML Configuration Snippets: Calculation Steps: Apply Transformations: age_centered: center_variable(40, centering.age=30) = 40 - 30 = 10 age_squared_centered: square_variable(age_centered=10) = 10^2 = 100 income_log: log_transform(income=70000) (natural log) ≈ 11.15625 transformed_data available subsequent steps include values alongside original data. Calculate Base Score: score includes baseline intercept plus sum (direct coefficient * transformed variable value). intercept: 1.25 (intercepts.baseline) age_centered: 0.05 * 10 = 0.5 age_squared_centered: -0.02 * 100 = -2.0 income_log: 0.15 * 11.15625 = 1.6734375 base_score = 1.25 + 0.5 - 2.0 + 1.6734375 = 1.4234375 Calculate Factor Coefficients Sum (factor_coeffs_sum): sum comes looking coefficients associated active levels categorical variables. YAML maps level 1 coefficients.student_modifier, -0.50. YAML maps level coefficients.employment_unemployed, -0.25. factor_coeffs_sum = -0.50 + (-0.25) = -0.75 Calculate Conditional Coefficients Sum (conditional_coeffs_sum): sum comes conditions evaluate true. example, assume conditions met defined. conditional_coeffs_sum = 0 Calculate Total Score (output transformation): total_score = base_score + factor_coeffs_sum + conditional_coeffs_sum total_score = 1.4234375 + (-0.75) + 0 = 0.6734375 Apply Output Transformation: output_transformation truncate_variable(result, 0, 100). final_result = truncate_variable(0.6734375, 0, 100) = 0.6734375 (since within range) final_result 0.6734375 rydra_calculate() return input data configuration.","code":"constants:   age: 30   income: 50000  # model_name: example_calculation_model (hypothetical) intercepts:   baseline: 1.25  coefficients:   age_centered: 0.05   age_squared_centered: -0.02   income_log: 0.15   student_modifier: -0.50             # Used by factors   employment_unemployed: -0.25      # Used by factors   # (other coefficients for different factor levels or conditions might exist)  transformations:   - name: \"age_centered\"     formula: \"center_variable(age, constants.age)\"   - name: \"age_squared_centered\"     formula: \"square_variable(age_centered)\"   - name: \"income_log\"     formula: \"log_transform(income)\"  factors:   - name: \"student\"     levels:       - value: 0         coefficient: \"coefficients.baseline_student_effect\" # Hypothetical baseline effect       - value: 1         coefficient: \"coefficients.student_modifier\"   - name: \"employment_status\"     levels:       - value: \"Employed\"         coefficient: \"coefficients.baseline_employment_effect\" # Hypothetical       - value: \"Unemployed\"         coefficient: \"coefficients.employment_unemployed\"       # (other levels)  # conditions: (Assume no conditions for this specific example for simplicity, or they evaluate to 0) #   - name: \"some_condition\" #     condition: \"age_centered > 15\" #     coefficient: \"coefficients.conditional_add_on\"  output_transformation: \"truncate_variable(result, 0, 100)\""},{"path":"https://andjar.github.io/Rydra/index.html","id":"logging-calculations","dir":"","previous_headings":"","what":"Logging Calculations","title":"A Hydra-inspired configuration management tool for R","text":"Rydra supports optional logging calculation details JSON files. can useful debugging, auditing, reproducing specific calculations. enable logging, add logging section root YAML configuration file:","code":"# At the root of your config.yaml, alongside model_name, centering, etc. logging:   enabled: true  # Set to true to enable logging   path: \"calculation_logs\" # Optional: directory to store log files                            # Defaults to \"./rydra_logs/\" if enabled and path is not specified                            # Path is relative to the current working directory when rydra_calculate is run.  model_name: \"simplified_model\" centering:   # ... rest of your configuration"},{"path":"https://andjar.github.io/Rydra/index.html","id":"log-file-content","dir":"","previous_headings":"Logging Calculations","what":"Log File Content","title":"A Hydra-inspired configuration management tool for R","text":"logging enabled, Rydra create JSON file call rydra_calculate. files named using timestamp unique UUID, example: 20231027153000123456_xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.json. log file contains following information: timestamp: date time (ISO 8601 format) calculation performed. config_path: Path YAML configuration file used. model_name: name model used configuration. data: original input data provided rydra_calculate. model_config_used: specific part configuration corresponds model_name used calculation. input_data_processed_for_calc: Input data initial processing (e.g., multi-row data frame input, first row taken converted list). transformed_data: data transformations applied. factor_coeffs_sum: sum coefficients derived factors section. base_score: score calculated intercepts direct coefficients multiplied transformed data values. conditional_coeffs_sum: sum coefficients applied due met conditions. total_score_pre_output_transform: total score final output_transformation applied. final_result: final result calculation steps, including output transformation.","code":""},{"path":"https://andjar.github.io/Rydra/index.html","id":"dependencies-for-logging","dir":"","previous_headings":"Logging Calculations","what":"Dependencies for Logging","title":"A Hydra-inspired configuration management tool for R","text":"logging feature uses following R packages, installed dependencies Rydra: * jsonlite: writing data JSON format. * uuid: generating unique identifiers log filenames. logging fails reason (e.g., specified path writable), Rydra issue warning, main calculation proceed normal.","code":""},{"path":"https://andjar.github.io/Rydra/reference/Rydra-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Rydra: A Lite, Hydra-Inspired Configuration Package for R — Rydra-package","title":"Rydra: A Lite, Hydra-Inspired Configuration Package for R — Rydra-package","text":"Rydra allows define complex calculation configurations YAML files, including transformations, conditional logic, model parameters. provides functions use configurations perform calculations input data.","code":""},{"path":"https://andjar.github.io/Rydra/reference/Rydra-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rydra: A Lite, Hydra-Inspired Configuration Package for R — Rydra-package","text":"Key Functions: load_config: Loads YAML configuration file. rydra_calculate: Performs calculations based loaded     configuration input data.","code":""},{"path":"https://andjar.github.io/Rydra/reference/Rydra-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rydra: A Lite, Hydra-Inspired Configuration Package for R — Rydra-package","text":"","code":"if (FALSE) { # \\dontrun{ # 1. Create a YAML configuration file (e.g., \"my_model_config.yaml\") #    similar to the structure shown in the package documentation or vignettes.    config_path <- system.file(\"extdata\", \"example_config.yaml\", package = \"Rydra\")    if (config_path == \"\") {      # Fallback for when not installed, e.g. during dev      # Assuming current dir is package root      if(file.exists(\"inst/extdata/example_config.yaml\")) {          config_path <- \"inst/extdata/example_config.yaml\"      } else {          stop(\"Example config not found. Ensure package is built or path is correct.\")      }    }  # 2. Prepare your input data as a list or single-row data frame input_data <- list(   biochemical_ga    = 12, # weeks   weight            = 70, # kg   age               = 30, # years   plgf_machine      = 1,  # Corresponds to 'Delfia' in example config   race              = 1,  # e.g., Caucasian/Other   smoking           = 0,  # 0 for No, 1 for Yes   diabetes_type_i   = 0,  # 0 for No, 1 for Yes   diabetes_type_ii  = 0,  # 0 for No, 1 for Yes   conception        = 1,  # e.g., 1 for Spontaneous, 3 for IVF   previous          = 0   # e.g., 0 for Nulliparous   # ... any other variables required by your config's transformations or conditions )  # 3. Perform the calculation if (file.exists(config_path)) {   result <- rydra_calculate(config_path = config_path, data = input_data)   print(paste(\"Calculated result:\", result)) } else {   print(\"Could not find example_config.yaml\") }  # Example of accessing the config directly if (file.exists(config_path)) {   my_config <- load_config(config_path)   # print(my_config$plgf_model$reference_paper) }  } # }"},{"path":"https://andjar.github.io/Rydra/reference/add_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a term to a variable — add_value","title":"Add a term to a variable — add_value","text":"Adds specified term variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/add_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a term to a variable — add_value","text":"","code":"add_value(value, term)"},{"path":"https://andjar.github.io/Rydra/reference/add_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a term to a variable — add_value","text":"value variable term added. term term add.","code":""},{"path":"https://andjar.github.io/Rydra/reference/add_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a term to a variable — add_value","text":"variable term added.","code":""},{"path":"https://andjar.github.io/Rydra/reference/add_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a term to a variable — add_value","text":"","code":"add_value(10, 5) # Returns 15 #> [1] 15"},{"path":"https://andjar.github.io/Rydra/reference/apply_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply conditional coefficients — apply_conditions","title":"Apply conditional coefficients — apply_conditions","text":"function processes 'conditions' block configuration. defined condition, evaluates boolean expression context input data. true, resolves specified coefficient path within model's configuration adds running total.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply conditional coefficients — apply_conditions","text":"","code":"apply_conditions(model_config, data)"},{"path":"https://andjar.github.io/Rydra/reference/apply_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply conditional coefficients — apply_conditions","text":"model_config specific model configuration list (e.g., config[[model_name]]) containing condition definitions. data list containing input data, typically transformations. Condition formulas evaluated data.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply conditional coefficients — apply_conditions","text":"numeric value representing sum coefficients met conditions.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply factor-based coefficients — apply_factors","title":"Apply factor-based coefficients — apply_factors","text":"function processes 'factors' block configuration. defined factor, finds corresponding value input data, looks coefficient level, adds running total.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply factor-based coefficients — apply_factors","text":"","code":"apply_factors(config, data, model_name)"},{"path":"https://andjar.github.io/Rydra/reference/apply_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply factor-based coefficients — apply_factors","text":"config full configuration list, typically loaded YAML file. data list containing input data, typically transformations. model_name name specific model configuration block used config.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply factor-based coefficients — apply_factors","text":"numeric value representing sum coefficients factors.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_transformations.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply transformations to data based on model and global configurations — apply_transformations","title":"Apply transformations to data based on model and global configurations — apply_transformations","text":"function applies series transformations input data defined specific model's configuration block within larger YAML structure.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_transformations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply transformations to data based on model and global configurations — apply_transformations","text":"","code":"apply_transformations(   model_yaml_config,   data,   transformation_R_functions,   full_config )"},{"path":"https://andjar.github.io/Rydra/reference/apply_transformations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply transformations to data based on model and global configurations — apply_transformations","text":"model_yaml_config specific model configuration list (e.g., config[[model_name]]) containing transformation definitions. data data frame list containing input data. data modified adding new transformed columns. transformation_R_functions named list R functions available use transformation formulas. full_config full top-level configuration list, used access global elements like centering values.","code":""},{"path":"https://andjar.github.io/Rydra/reference/apply_transformations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply transformations to data based on model and global configurations — apply_transformations","text":"data frame transformed variables added.","code":""},{"path":"https://andjar.github.io/Rydra/reference/center_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Center a variable — center_variable","title":"Center a variable — center_variable","text":"Subtracts centering value variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/center_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Center a variable — center_variable","text":"","code":"center_variable(x, center)"},{"path":"https://andjar.github.io/Rydra/reference/center_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Center a variable — center_variable","text":"x variable center. center centering value.","code":""},{"path":"https://andjar.github.io/Rydra/reference/center_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Center a variable — center_variable","text":"centered variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/center_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Center a variable — center_variable","text":"","code":"center_variable(10, 5) # Returns 5 #> [1] 5 center_variable(c(1, 2, 3, 4, 5), 3) # Returns c(-2, -1, 0, 1, 2) #> [1] -2 -1  0  1  2"},{"path":"https://andjar.github.io/Rydra/reference/exp_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential-transform a variable — exp_transform","title":"Exponential-transform a variable — exp_transform","text":"Exponentiates variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/exp_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential-transform a variable — exp_transform","text":"","code":"exp_transform(x, base = exp(1))"},{"path":"https://andjar.github.io/Rydra/reference/exp_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential-transform a variable — exp_transform","text":"x variable exponentiate. base base exponentiation. Defaults exp(1) (natural exponentiation).","code":""},{"path":"https://andjar.github.io/Rydra/reference/exp_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential-transform a variable — exp_transform","text":"exponentiated variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/exp_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential-transform a variable — exp_transform","text":"","code":"exp_transform(2, base = 10) # Returns 100 #> [1] 100 exp_transform(2) # Returns exp(2) #> [1] 7.389056"},{"path":"https://andjar.github.io/Rydra/reference/get_logging_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get logging configuration — get_logging_config","title":"Get logging configuration — get_logging_config","text":"Retrieves logging settings main configuration list. Provides sensible defaults settings specified.","code":""},{"path":"https://andjar.github.io/Rydra/reference/get_logging_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get logging configuration — get_logging_config","text":"","code":"get_logging_config(config)"},{"path":"https://andjar.github.io/Rydra/reference/get_logging_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get logging configuration — get_logging_config","text":"config main configuration list, typically loaded YAML file via load_config().","code":""},{"path":"https://andjar.github.io/Rydra/reference/get_logging_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get logging configuration — get_logging_config","text":"list logging configuration: enabled: Logical, TRUE logging enabled, FALSE otherwise. path: Character, directory path storing logs.                         Defaults \"rydra_logs\" enabled path specified.                         NULL logging disabled.","code":""},{"path":"https://andjar.github.io/Rydra/reference/get_logging_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get logging configuration — get_logging_config","text":"","code":"if (FALSE) { # \\dontrun{ # Example using a manually created config list dummy_config_no_logging <- list(model_name = \"test\") settings1 <- get_logging_config(dummy_config_no_logging) print(paste(\"Logging enabled:\", settings1$enabled)) # Should be FALSE  dummy_config_with_logging <- list(   model_name = \"test\",   logging = list(enabled = TRUE, path = \"my_app_logs\") ) settings2 <- get_logging_config(dummy_config_with_logging) if (settings2$enabled) {   print(paste(\"Logging enabled, path:\", settings2$path)) }  # Example with package's example_config.yaml config_path <- system.file(\"extdata\", \"example_config.yaml\", package = \"Rydra\") if (config_path == \"\" && file.exists(\"inst/extdata/example_config.yaml\")) {   config_path <- \"inst/extdata/example_config.yaml\" # Fallback for dev }  if (file.exists(config_path)) {   actual_config <- load_config(config_path)   log_settings_from_file <- get_logging_config(actual_config)   print(paste(\"Logging from file enabled:\", log_settings_from_file$enabled))   if (log_settings_from_file$enabled) {     print(paste(\"Logging path from file:\", log_settings_from_file$path))   } } else {   print(\"Could not find example_config.yaml for get_logging_config example.\") } } # }"},{"path":"https://andjar.github.io/Rydra/reference/load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a Rydra configuration file — load_config","title":"Load a Rydra configuration file — load_config","text":"function reads YAML file returns R list.","code":""},{"path":"https://andjar.github.io/Rydra/reference/load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a Rydra configuration file — load_config","text":"","code":"load_config(file_path)"},{"path":"https://andjar.github.io/Rydra/reference/load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a Rydra configuration file — load_config","text":"file_path Path YAML configuration file.","code":""},{"path":"https://andjar.github.io/Rydra/reference/load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a Rydra configuration file — load_config","text":"list representing parsed YAML configuration.","code":""},{"path":"https://andjar.github.io/Rydra/reference/load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a Rydra configuration file — load_config","text":"","code":"if (FALSE) { # \\dontrun{ # Load the example configuration file included with the package config_path <- system.file(\"extdata\", \"example_config.yaml\", package = \"Rydra\")  # Fallback for development when package is not installed if (config_path == \"\" && file.exists(\"inst/extdata/example_config.yaml\")) {   config_path <- \"inst/extdata/example_config.yaml\" }  if (file.exists(config_path)) {   my_config <- load_config(config_path)   # You can now inspect parts of the configuration   # print(my_config$plgf_model$reference_paper)   # print(names(my_config)) } else {   print(\"Could not find example_config.yaml for load_config example.\") } } # }"},{"path":"https://andjar.github.io/Rydra/reference/log_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-transform a variable — log_transform","title":"Log-transform a variable — log_transform","text":"Log-transforms variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/log_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-transform a variable — log_transform","text":"","code":"log_transform(x, base = exp(1))"},{"path":"https://andjar.github.io/Rydra/reference/log_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-transform a variable — log_transform","text":"x variable log-transform. base base logarithm. Defaults exp(1) (natural logarithm).","code":""},{"path":"https://andjar.github.io/Rydra/reference/log_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-transform a variable — log_transform","text":"log-transformed variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/log_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-transform a variable — log_transform","text":"","code":"log_transform(100, base = 10) # Returns 2 #> [1] 2 log_transform(exp(2)) # Returns 2 (natural log) #> [1] 2"},{"path":"https://andjar.github.io/Rydra/reference/multiply_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply a variable by a multiplier — multiply_by","title":"Multiply a variable by a multiplier — multiply_by","text":"Multiplies variable specified multiplier.","code":""},{"path":"https://andjar.github.io/Rydra/reference/multiply_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply a variable by a multiplier — multiply_by","text":"","code":"multiply_by(value, multiplier)"},{"path":"https://andjar.github.io/Rydra/reference/multiply_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply a variable by a multiplier — multiply_by","text":"value variable multiply. multiplier multiplier value.","code":""},{"path":"https://andjar.github.io/Rydra/reference/multiply_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply a variable by a multiplier — multiply_by","text":"variable multiplied multiplier.","code":""},{"path":"https://andjar.github.io/Rydra/reference/multiply_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiply a variable by a multiplier — multiply_by","text":"","code":"multiply_by(10, 5) # Returns 50 #> [1] 50"},{"path":"https://andjar.github.io/Rydra/reference/rydra_calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate result based on Rydra configuration and input data — rydra_calculate","title":"Calculate result based on Rydra configuration and input data — rydra_calculate","text":"main function perform calculations using Rydra setup. loads configuration, applies transformations, evaluates conditions, computes model score, applies output transformation.","code":""},{"path":"https://andjar.github.io/Rydra/reference/rydra_calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate result based on Rydra configuration and input data — rydra_calculate","text":"","code":"rydra_calculate(   config_path,   data,   model_name = \"plgf_model\",   transformations = .default_rydra_transformations )"},{"path":"https://andjar.github.io/Rydra/reference/rydra_calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate result based on Rydra configuration and input data — rydra_calculate","text":"config_path Path YAML configuration file. data list single-row data frame representing input data calculation performed. model_name name model configuration block YAML. Defaults \"plgf_model\". transformations named list custom transformation functions. Defaults internal list including center_variable, square_variable, log_transform, exp_transform, multiply_by, add_value. Provide list override defaults. Provide list() use functions globally available defined YAML.","code":""},{"path":"https://andjar.github.io/Rydra/reference/rydra_calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate result based on Rydra configuration and input data — rydra_calculate","text":"final calculated result applying steps.","code":""},{"path":"https://andjar.github.io/Rydra/reference/rydra_calculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate result based on Rydra configuration and input data — rydra_calculate","text":"","code":"if (FALSE) { # \\dontrun{ # Basic example using the package's built-in example configuration config_path <- system.file(\"extdata\", \"example_config.yaml\", package = \"Rydra\")  # Fallback for development when package is not installed if (config_path == \"\" && file.exists(\"inst/extdata/example_config.yaml\")) {   config_path <- \"inst/extdata/example_config.yaml\" }  if (file.exists(config_path)) {   input_data <- list(     biochemical_ga    = 12, # weeks     weight            = 70, # kg     age               = 30, # years     plgf_machine      = 1,  # Corresponds to 'Delfia' in example config     race              = 1,  # e.g., Caucasian/Other     smoking           = 0,  # 0 for No, 1 for Yes     diabetes_type_i   = 0,  # 0 for No, 1 for Yes     diabetes_type_ii  = 0,  # 0 for No, 1 for Yes     conception        = 1,  # e.g., 1 for Spontaneous, 3 for IVF     previous          = 0   # e.g., 0 for Nulliparous   )   result <- rydra_calculate(config_path = config_path, data = input_data)   print(paste(\"Calculated result:\", result))    # Example with custom transformations (overriding defaults)   # This example defines a new transformation and uses only that one.   # Note: The example_config.yaml might not use 'custom_doubler'.   # This is for illustration of the 'transformations' parameter.   my_transforms <- list(custom_doubler = function(x) x * 2)   # If your config expects 'ga_centered', this example might need adjustment   # or a config that uses 'custom_doubler(some_variable)'.   # For this to run meaningfully, you'd typically align custom functions   # with what your specific YAML configuration expects.    # Example using NO base transformations, relying only on globally defined ones   # (if your YAML refers to functions like 'log' directly and they are available)   # result_no_base <- rydra_calculate(config_path = config_path,   #                                   data = input_data,   #                                   transformations = list())   # print(paste(\"Calculated result (no base transformations):\", result_no_base))  } else {   print(\"Could not find example_config.yaml for rydra_calculate examples.\") } } # }"},{"path":"https://andjar.github.io/Rydra/reference/square_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Square a variable — square_variable","title":"Square a variable — square_variable","text":"Squares variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/square_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Square a variable — square_variable","text":"","code":"square_variable(x)"},{"path":"https://andjar.github.io/Rydra/reference/square_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Square a variable — square_variable","text":"x variable square.","code":""},{"path":"https://andjar.github.io/Rydra/reference/square_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Square a variable — square_variable","text":"squared variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/square_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Square a variable — square_variable","text":"","code":"square_variable(5) # Returns 25 #> [1] 25 square_variable(c(1, 2, 3)) # Returns c(1, 4, 9) #> [1] 1 4 9"},{"path":"https://andjar.github.io/Rydra/reference/truncate_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate a variable — truncate_variable","title":"Truncate a variable — truncate_variable","text":"Truncates variable specified minimum maximum range. Values less min_val set min_val. Values greater max_val set max_val.","code":""},{"path":"https://andjar.github.io/Rydra/reference/truncate_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate a variable — truncate_variable","text":"","code":"truncate_variable(x, min_val, max_val)"},{"path":"https://andjar.github.io/Rydra/reference/truncate_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate a variable — truncate_variable","text":"x variable truncate. min_val minimum value truncation. max_val maximum value truncation.","code":""},{"path":"https://andjar.github.io/Rydra/reference/truncate_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate a variable — truncate_variable","text":"truncated variable.","code":""},{"path":"https://andjar.github.io/Rydra/reference/truncate_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate a variable — truncate_variable","text":"","code":"truncate_variable(c(1, 5, 10, 15, 20), 5, 15) # Returns c(5, 5, 10, 15, 15) #> [1]  5  5 10 15 15 truncate_variable(0, 1, 10) # Returns 1 #> [1] 1 truncate_variable(100, 1, 10) # Returns 10 #> [1] 10"},{"path":"https://andjar.github.io/Rydra/reference/validate_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a Rydra configuration — validate_config","title":"Validate a Rydra configuration — validate_config","text":"function checks parsed YAML configuration list valid. collects errors stops found, reporting .","code":""},{"path":"https://andjar.github.io/Rydra/reference/validate_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a Rydra configuration — validate_config","text":"","code":"validate_config(config, model_name, data)"},{"path":"https://andjar.github.io/Rydra/reference/validate_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a Rydra configuration — validate_config","text":"config full configuration list validate, typically loaded YAML file. model_name name specific model block within config validate. data list data frame representing input data. Used validate factor levels data present parameter.","code":""},{"path":"https://andjar.github.io/Rydra/reference/validate_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a Rydra configuration — validate_config","text":"Invisible TRUE validation succeeds, otherwise stops error.","code":""}]
